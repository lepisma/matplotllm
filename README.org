#+TITLE: MatplotLLM

[[https://github.com/lepisma/matplotllm/tags][file:https://img.shields.io/github/v/tag/lepisma/matplotllm.svg]]

MatplotLLM is a natural language layer over matplotlib to visualize data. The
main purpose is to accelerate building a certain /your way/ of visualizing data
points without meddling with innards of a tool like matplotlib. As of now, this
is a system to be used from within Emacs/Org system. The motivation is coming
from something I wrote in a blog on AI co-programming [[https://lepisma.xyz/2023/06/29/mu4e-snooze/index.html][here]].

* Usage
There are two descriptions that you need to provide, both in natural language.
One that describes the data source. Second that describes how to plot. The
second is where I believe a conversational interaction, not present right now,
will be better than having a static text description.

You can use these in an org-babel source block with language name of ~matplotllm~
as shown in below example. There is an org mode divider ~-----~ used to separate
data description and plot description. In current design this distinction might
look useless, but it might be helpful later on.

You will have to set the value of ~matplotllm-openai-key~ to use this first.

The example below is trying to reproduce, I haven't done justice to it yet, the
plot in my blog post on [[https://lepisma.xyz/2023/07/22/learning-colemak-dh/index.html][Learning Colemak-DH]].

#+NAME: test-plot
#+begin_src matplotllm :results file :exports both

The data file to read is named `log.txt`. Here is how it looks like:

+ [2023-07-20 Thu] 97 WPM, acc 98%
Stopped daily tracking
+ [2023-05-16 Tue] 66 WPM, acc 91% | 66 WPM, acc 87%
+ [2023-05-15 Mon] 68 WPM, acc 89% | 65 WPM, acc 90% | 71 WPM, acc 93% | Colemak-DH as default.
+ [2023-05-14 Sun] 65 WPM, acc 92% | 62 WPM, acc 87% | 65 WPM, acc 91% | 70 WPM, acc 90%

Each line is for a day has WPM and accuracy entries from multiple tries in a day. Some line may have ill-structured text which you can ignore.

-----

Plot a minimal scatter plot that shows WPM plotted against dates. Use accuracy values as color of the scatter plot, darker (blue purple) is more accurate. Also clear up the axis and only show faint grid lines, and show dates where ticks have months written in them without crowding them too much. Annotate the first and last point with actual WPM value.
#+end_src

#+RESULTS: test-plot
[[file:matplotllm.png]]

Based on the output at every call during development, It definitely feels like I
would need a conversational input method for plot description as I needed a lot
of iterative feedback to be given to the LLM. Data description, on the other
hand, worked well enough.

Other features like saving the plot in high quality, allowing stylistic
templates in system prompts, etc. would come in later versions.
